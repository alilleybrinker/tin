
use std:io:println;
use std:process:{StatusCode, MainError};

// Special pre-provided enums:
//
// Option[T]
// |- Option:Some(T)
// |- Option:None
//
// Result[O, E]
// |- Result:Ok(O)
// |- Result:Err(E)
//
// Either[L, R]
// |- Either:Left(L)
// |- Either:Right(R)

struct SQL {
	internalState: SqlEscaperInternal,
}

enum SqlEscapeError {
	BadSql {
		reason: String,
	}
}

// Protocol used for anything that accepts a template string
// (this allows a type to support the ."" syntax).
protocol Template {
	type Error = SqlEscapeError;

	// Protocols with an `Error` associated type can use the
	// `Self::Result` shorthand with the `Result::Error` variant
	// already filled in. This is because `Result` is special-cased
	// in the compiler.
	fn template(format-str: &String) -> Self::Result[String] {
		todo
	}
}

fn main() -> Result[StatusCode, MainError] {
	let table = "users";
	let col-name = "favorite-ice-cream";
	let val = "chocolate";

	println(SQL."SELECT * FROM {table} WHERE {col-name}={val}"?);
}

